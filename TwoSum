//Given an array of integers, find two numbers such that they add up to a specific target number.
//The function twoSum should return indices of the two numbers such that they add up to the target, 
//where index1 must be less than index2. 
//Please note that your returned answers (both index1 and index2) are not zero-based.
//You may assume that each input would have exactly one solution.
//Input: numbers={2, 7, 11, 15}, target=9
//Output: index1=1, index2=2 

//Solution: O(n) Have a HashTable whose key is the difference between the target and the number at a particular index
//and the value is the index of the number
//For the above example targetDiffMap is
//    (7,0) (2,1) (-2,2) (-6,3)
 
 
 //Java
 public int[] twoSum(int[] numbers, int target) 
 {
     if(numbers == null || numbers.length == 0)
          return null;
      int[] resultIndices = {-1,-1};
      HashMap<Integer,Integer> targetDiffMap = new HashMap<Integer, Integer>();
      for(int i =0; i < numbers.length; i++)
      {
          if(targetDiffMap.containsKey(numbers[i]))
          {
              resultIndices[0] = targetDiffMap.get(numbers[i]) + 1;
              resultIndices[1] = i +1;
              break;
          }
          else
              targetDiffMap.put(target - numbers[i],i);
      }
      return resultIndices;
  }
    
    
//C#
  public int[] twoSum(int[] numbers, int target)  
  {
      if (numbers == null || numbers.Length == 0)
          return null;
      int[] resultIndices = {-1,-1};
      Dictionary<int, int> targetdiffMap = new Dictionary<int, int>();
      for (int i = 0; i < numbers.Length; i++)
      {
          if (targetdiffMap.ContainsKey(numbers[i]))
          {
              resultIndices[0] = targetdiffMap[numbers[i]] + 1;
              resultIndices[1] = i + 1;
          }
          else
              targetdiffMap.Add(target - numbers[i],i);
      }
      return resultIndices;
  }
